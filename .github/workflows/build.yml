name: Build Android APK
on: [push]
env:
  ANDROID_HOME: ${{ github.workspace }}/android-sdk
  ANDROIDNDK: ${{ github.workspace }}/android-ndk-r23c
  PATH: ${{ github.workspace }}/android-sdk/cmdline-tools/latest/bin:$PATH
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    # 第一步：安装基础工具（使用正确的包管理器）
    - name: Install essential tools
      run: |
        # 在GitHub Actions环境中使用apt而不是apt-get
        apt update
        apt install -y \
          tar \
          gzip \
          git \
          curl \
          wget \
          unzip \
          zip \
          make
        
    # 第二步：检出代码
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    # 第三步：设置Python环境
    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    # 第四步：解决libtinfo依赖
    - name: Fix library dependencies
      run: |
        apt install -y \
          libtinfo6 \
          libncurses6 \
          zlib1g-dev
        ln -sf /usr/lib/x86_64-linux-gnu/libtinfo.so.6 /usr/lib/x86_64-linux-gnu/libtinfo.so.5
        ln -sf /usr/lib/x86_64-linux-gnu/libncurses.so.6 /usr/lib/x86_64-linux-gnu/libncurses.so.5
    
    # 第五步：安装Java和构建工具
    - name: Install Java and build tools
      run: |
        apt install -y \
          openjdk-11-jdk \
          autoconf \
          libtool \
          pkg-config \
          cmake \
          libffi-dev \
          libssl-dev
    
    # 第六步：设置Android SDK
    - name: Setup Android SDK
      run: |
        mkdir -p $ANDROID_HOME/cmdline-tools
        curl -L --retry 3 --retry-delay 5 \
          https://mirrors.tuna.tsinghua.edu.cn/Android/repository/commandlinetools-linux-10406996_latest.zip \
          -o cmdline-tools.zip || \
        curl -L --retry 3 --retry-delay 5 \
          https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip \
          -o cmdline-tools.zip
        unzip cmdline-tools.zip -d $ANDROID_HOME/cmdline-tools
        mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
        
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
          "platform-tools" \
          "platforms;android-31" \
          "build-tools;31.0.0"
    
    # 第七步：设置Android NDK
    - name: Setup Android NDK
      run: |
        curl -L --retry 3 --retry-delay 5 \
          https://dl.google.com/android/repository/android-ndk-r23c-linux.zip \
          -o ndk.zip
        unzip ndk.zip
        mv android-ndk-r23c $ANDROIDNDK
    
    # 第八步：安装Buildozer
    - name: Install Buildozer
      run: |
        python -m pip install --upgrade pip
        pip install --user buildozer==1.4.0
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    
    # 第九步：构建APK
    - name: Build APK
      run: |
        buildozer -v android clean
        buildozer -v android debug 2>&1 | tee build.log
        
        if ! ls bin/*.apk 1> /dev/null 2>&1; then
          echo "::error::APK build failed!"
          grep -A 30 -B 10 -i "error\|fail\|exception" build.log || cat build.log
          exit 1
        fi
    
    # 第十步：上传产物
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app-debug
        path: bin/*.apk
        
    - name: Upload build log
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: build-log
        path: build.log