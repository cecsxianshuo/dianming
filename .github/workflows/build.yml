name: Android APK Builder
on: [push]
env:
  ANDROID_HOME: ${{ github.workspace }}/android-sdk
  ANDROIDNDK: ${{ github.workspace }}/android-ndk-r23c
  PATH: ${{ github.workspace }}/android-sdk/cmdline-tools/latest/bin:$PATH
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Install Docker Engine
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          ca-certificates \
          curl \
          gnupg \
          lsb-release
        sudo mkdir -p /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
          $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    # 阶段1：使用 GitHub 预装工具验证
    - name: Verify basic tools
      run: |
        # GitHub 的 ubuntu-latest 环境默认已安装这些工具
        unzip -v || { echo "::error::unzip 不可用"; exit 1; }
        curl --version || { echo "::error::curl 不可用"; exit 1; }
        git --version || { echo "::error::git 不可用"; exit 1; }
        python3 --version || { echo "::error::Python 不可用"; exit 1; }
    # 阶段2：检出代码
    - uses: actions/checkout@v4
    # 阶段3：设置 Python 环境
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    # 阶段4：安装 Android SDK
    - name: Install Android SDK
      run: |
        mkdir -p $ANDROID_HOME/cmdline-tools
        curl --retry 5 --retry-delay 10 --fail \
          https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip \
          -o /tmp/cmdline-tools.zip
        unzip -q /tmp/cmdline-tools.zip -d $ANDROID_HOME/cmdline-tools
        mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
        
        echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses > /dev/null
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
          "platform-tools" \
          "platforms;android-31" \
          "build-tools;31.0.0" > /dev/null
    # 阶段5：安装 Android NDK
    - name: Install Android NDK
      run: |
        curl --retry 5 --retry-delay 10 --fail \
          https://dl.google.com/android/repository/android-ndk-r23c-linux.zip \
          -o /tmp/ndk.zip
        unzip -q /tmp/ndk.zip -d ${{ github.workspace }}
    # 阶段6：安装 Buildozer
    - name: Install Buildozer
      run: |
        python -m pip install --upgrade pip
        pip install --user buildozer==1.4.0
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    # 阶段7：构建 APK
    - name: Build APK
      timeout-minutes: 30
      run: |
        # 自动生成 buildozer.spec 如果不存在
        if [ ! -f buildozer.spec ]; then
          buildozer init
          echo "android.ndk_path = $ANDROIDNDK" >> buildozer.spec
          echo "android.sdk_path = $ANDROID_HOME" >> buildozer.spec
        fi
        
        buildozer -v android clean
        buildozer -v android debug 2>&1 | tee build.log
        
        if ! ls bin/*.apk 1> /dev/null 2>&1; then
          echo "::error::构建失败！错误摘要："
          grep -A 20 -B 10 -i "error\|fail\|exception" build.log
          exit 1
        fi
    # 阶段8：上传产物
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: |
          bin/*.apk
          build.log